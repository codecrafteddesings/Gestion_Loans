{"ast":null,"code":"var _jsxFileName = \"D:\\\\Usuario\\\\wilme\\\\Escritorio\\\\Gestion_Loans_Clean\\\\loan-app-ui\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [loans, setLoans] = useState([]);\n  const [editClient, setEditClient] = useState(null);\n  useEffect(() => {\n    fetchClients();\n    fetchLoans();\n  }, []);\n  const fetchClients = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/clients\");\n      setClients(response.data);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n    }\n  };\n  const fetchLoans = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\n      setLoans(response.data);\n    } catch (error) {\n      console.error(\"Error fetching loans:\", error);\n    }\n  };\n  const handleDeleteClient = async clientId => {\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\n      try {\n        await axios.delete(`http://localhost:5000/api/clients/${clientId}`);\n        fetchClients();\n      } catch (error) {\n        console.error(\"Error deleting client:\", error);\n      }\n    }\n  };\n  const handleEditClient = client => {\n    setEditClient(client);\n  };\n  const handleUpdateClient = async e => {\n    e.preventDefault();\n    try {\n      await axios.put(`http://localhost:5000/api/clients/${editClient._id}`, editClient);\n      setEditClient(null);\n      fetchClients();\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clientes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nombre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Correo Electr\\xF3nico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Tel\\xE9fono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"C\\xE9dula\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Direcci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Acciones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: clients.map(client => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.cedula\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: client.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-warning mr-2\",\n              onClick: () => handleEditClient(client),\n              children: \"Editar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger\",\n              onClick: () => handleDeleteClient(client._id),\n              children: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, client._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), editClient && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Editar Cliente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUpdateClient,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nombre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: editClient.name,\n            onChange: e => setEditClient({\n              ...editClient,\n              name: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Correo Electr\\xF3nico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            className: \"form-control\",\n            value: editClient.email,\n            onChange: e => setEditClient({\n              ...editClient,\n              email: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Tel\\xE9fono\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: editClient.phone,\n            onChange: e => setEditClient({\n              ...editClient,\n              phone: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"C\\xE9dula\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: editClient.cedula,\n            onChange: e => setEditClient({\n              ...editClient,\n              cedula: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Direcci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: editClient.address,\n            onChange: e => setEditClient({\n              ...editClient,\n              address: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Actualizar Cliente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"+boBxy5J/s1yAvcV62RPglc0YLE=\");\n_c = Dashboard;\nexport default Dashboard;\n\n/*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      const loansWithClientNames = await Promise.all(\r\n        response.data.map(async loan => {\r\n          const clientResponse = await axios.get(`http://localhost:5000/api/clientes/${loan.clientId}`);\r\n          return { ...loan, clientName: clientResponse.data.name };\r\n        })\r\n      );\r\n      setLoans(loansWithClientNames);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientName}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n*/\n\n/*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      const loansWithClientNames = await Promise.all(\r\n        response.data.map(async loan => {\r\n          const clientResponse = await axios.get(`http://localhost:5000/api/clientes/${loan.clientId}`);\r\n          return { ...loan, clientName: clientResponse.data.name };\r\n        })\r\n      );\r\n      setLoans(loansWithClientNames);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientName}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard; \r\n*/\n//**************************************************************************************\n\n/*\r\n// Dashboard.js\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n  }, []);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/update/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/delete/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","_s","clients","setClients","loans","setLoans","editClient","setEditClient","fetchClients","fetchLoans","response","get","data","error","console","handleDeleteClient","clientId","window","confirm","delete","handleEditClient","client","handleUpdateClient","e","preventDefault","put","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","email","phone","cedula","address","onClick","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["D:/Usuario/wilme/Escritorio/Gestion_Loans_Clean/loan-app-ui/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Dashboard = () => {\r\n  const [clients, setClients] = useState([]);\r\n  const [loans, setLoans] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchClients();\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchClients = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/clients\");\r\n      setClients(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching clients:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteClient = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clients/${clientId}`);\r\n        fetchClients();\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditClient = (client) => {\r\n    setEditClient(client);\r\n  };\r\n\r\n  const handleUpdateClient = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clients/${editClient._id}`, editClient);\r\n      setEditClient(null);\r\n      fetchClients();\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Clientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {clients.map((client) => (\r\n            <tr key={client._id}>\r\n              <td>{client.name}</td>\r\n              <td>{client.email}</td>\r\n              <td>{client.phone}</td>\r\n              <td>{client.cedula}</td>\r\n              <td>{client.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditClient(client)}>\r\n                  Editar\r\n                </button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteClient(client._id)}>\r\n                  Eliminar\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {editClient && (\r\n        <div>\r\n          <h3>Editar Cliente</h3>\r\n          <form onSubmit={handleUpdateClient}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={editClient.name}\r\n                onChange={(e) => setEditClient({ ...editClient, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={editClient.email}\r\n                onChange={(e) => setEditClient({ ...editClient, email: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={editClient.phone}\r\n                onChange={(e) => setEditClient({ ...editClient, phone: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={editClient.cedula}\r\n                onChange={(e) => setEditClient({ ...editClient, cedula: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={editClient.address}\r\n                onChange={(e) => setEditClient({ ...editClient, address: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Actualizar Cliente</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n/*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      const loansWithClientNames = await Promise.all(\r\n        response.data.map(async loan => {\r\n          const clientResponse = await axios.get(`http://localhost:5000/api/clientes/${loan.clientId}`);\r\n          return { ...loan, clientName: clientResponse.data.name };\r\n        })\r\n      );\r\n      setLoans(loansWithClientNames);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientName}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n*/\r\n\r\n/*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      const loansWithClientNames = await Promise.all(\r\n        response.data.map(async loan => {\r\n          const clientResponse = await axios.get(`http://localhost:5000/api/clientes/${loan.clientId}`);\r\n          return { ...loan, clientName: clientResponse.data.name };\r\n        })\r\n      );\r\n      setLoans(loansWithClientNames);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientName}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard; \r\n*/\r\n//**************************************************************************************\r\n\r\n/*\r\n// Dashboard.js\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const [summary, setSummary] = useState({});\r\n  const [recentPayments, setRecentPayments] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [editClient, setEditClient] = useState(null);\r\n  const [clientForm, setClientForm] = useState({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n\r\n  const [loans, setLoans] = useState([]);\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/summary\");\r\n        setSummary(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching summary:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchRecentPayments = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/reports/recent-payments\");\r\n        setRecentPayments(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching recent payments:\", error);\r\n      }\r\n    };\r\n\r\n    fetchSummary();\r\n    fetchRecentPayments();\r\n  }, []);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/clientes/search?query=${searchQuery}`);\r\n      setSearchResults(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching search results:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (client) => {\r\n    setEditClient(client._id);\r\n    setClientForm({ name: client.name, email: client.email, phone: client.phone, idNumber: client.idNumber, address: client.address });\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/clientes/update/${editClient}`, clientForm);\r\n      setEditClient(null);\r\n      setClientForm({ name: '', email: '', phone: '', idNumber: '', address: '' });\r\n      handleSearch({ preventDefault: () => { } });\r\n    } catch (error) {\r\n      console.error(\"Error updating client:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (clientId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este cliente?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/clientes/delete/${clientId}`);\r\n        handleSearch({ preventDefault: () => { } });\r\n      } catch (error) {\r\n        console.error(\"Error deleting client:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/api/loans\");\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching loans:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId,\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/update/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error(\"Error updating loan:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm(\"¿Estás seguro de que deseas eliminar este préstamo?\")) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/delete/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error(\"Error deleting loan:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Dashboard</h1>\r\n        <p className=\"lead\">Resumen de Préstamos y Pagos</p>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-primary mb-3\">\r\n            <div className=\"card-header\">Clientes totales</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalClientes || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-success mb-3\">\r\n            <div className=\"card-header\">Total de Préstamos</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalPrestamos || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card text-white bg-danger mb-3\">\r\n            <div className=\"card-header\">Préstamos en Mora</div>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{summary.totalMora || 0}</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <h2>Pagos Recientes</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Fecha</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {recentPayments.map((payment) => (\r\n            <tr key={payment._id}>\r\n              <td>{payment.client ? payment.client.name : \"Cliente no encontrado\"}</td>\r\n              <td>{payment.amount}</td>\r\n              <td>{payment.date ? new Date(payment.date).toLocaleDateString() : \"Fecha inválida\"}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <h2>Buscar Cliente</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por nombre o cédula\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <h2>Resultados de la Búsqueda</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Correo Electrónico</th>\r\n            <th>Teléfono</th>\r\n            <th>Cédula</th>\r\n            <th>Dirección</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {searchResults.map((cliente) => (\r\n            <tr key={cliente._id}>\r\n              <td>{cliente.name}</td>\r\n              <td>{cliente.email}</td>\r\n              <td>{cliente.phone}</td>\r\n              <td>{cliente.idNumber}</td>\r\n              <td>{cliente.address}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEdit(cliente)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDelete(cliente._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editClient && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Cliente</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdate(); }}>\r\n            <div className=\"form-group\">\r\n              <label>Nombre</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.name}\r\n                onChange={(e) => setClientForm({ ...clientForm, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Correo Electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                value={clientForm.email}\r\n                onChange={(e) => setClientForm({ ...clientForm, email: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Teléfono</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.phone}\r\n                onChange={(e) => setClientForm({ ...clientForm, phone: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Cédula</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.idNumber}\r\n                onChange={(e) => setClientForm({ ...clientForm, idNumber: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Dirección</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={clientForm.address}\r\n                onChange={(e) => setClientForm({ ...clientForm, address: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditClient(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <h2>Préstamos</h2>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })}\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}