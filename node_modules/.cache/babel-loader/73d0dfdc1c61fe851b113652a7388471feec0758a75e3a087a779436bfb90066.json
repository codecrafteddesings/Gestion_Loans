{"ast":null,"code":"/*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\nconst Payments = () => {\r\n const [form, setForm] = useState({\r\n   loanId: \"\",\r\n   amount: \"\",\r\n });\r\n const [loans, setLoans] = useState([]);\r\n const [message, setMessage] = useState(\"\");\r\n const [payments, setPayments] = useState([]);\r\n const [remainingAmount, setRemainingAmount] = useState(0);\r\n const [searchTerm, setSearchTerm] = useState(\"\"); // Nuevo estado para el término de búsqueda\r\n\n useEffect(() => {\r\n   const fetchLoans = async () => {\r\n     try {\r\n       const response = await axios.get(`http://localhost:5000/api/loans`);\r\n       setLoans(response.data);\r\n     } catch (error) {\r\n       console.error(\"Error fetching loans:\", error);\r\n     }\r\n   };\r\n\n   fetchLoans();\r\n }, []);\r\n\n useEffect(() => {\r\n   if (form.loanId) {\r\n     const fetchPayments = async () => {\r\n       try {\r\n         const response = await axios.get(`http://localhost:5000/api/payments/loan/${form.loanId}`);\r\n         setPayments(response.data);\r\n         const totalPaid = response.data.reduce((total, payment) => total + payment.amount, 0);\r\n         const loan = loans.find(loan => loan._id === form.loanId);\r\n         if (loan) {\r\n           setRemainingAmount(loan.amount - totalPaid);\r\n         }\r\n       } catch (error) {\r\n         console.error(\"Error fetching payments:\", error);\r\n       }\r\n     };\r\n\n     fetchPayments();\r\n   }\r\n }, [form.loanId, loans]);\r\n\n const handleChange = (e) => {\r\n   setForm({\r\n     ...form,\r\n     [e.target.name]: e.target.value,\r\n   });\r\n };\r\n\n const handleSearchChange = (e) => {\r\n   setSearchTerm(e.target.value);\r\n };\r\n\n const handleSubmit = async (e) => {\r\n   e.preventDefault();\r\n   try {\r\n     await axios.post(`http://localhost:5000/api/payments`, form);\r\n     setMessage(\"Pago registrado con éxito.\");\r\n     setForm({ loanId: \"\", amount: \"\" });\r\n     setPayments([]);\r\n     setRemainingAmount(0);\r\n   } catch (error) {\r\n     setMessage(\"Error al registrar el pago.\");\r\n   }\r\n };\r\n\n const getClientName = (loan) => {\r\n   if (loan && loan.clientId) {\r\n     const { name, email } = loan.clientId;\r\n     return `${name} (${email})`;\r\n   }\r\n   return \"Cliente no encontrado\";\r\n };\r\n\n const filteredLoans = loans.filter((loan) =>\r\n   getClientName(loan).toLowerCase().includes(searchTerm.toLowerCase())\r\n );\r\n\n return (\r\n   <div className=\"container mt-5\">\r\n     <div className=\"jumbotron text-center\">\r\n       <h1 className=\"display-4\">Registro de Pagos</h1>\r\n       <p className=\"lead\">Complete el formulario para registrar un pago</p>\r\n     </div>\r\n     <div className=\"mb-3\">\r\n       <input\r\n         type=\"text\"\r\n         className=\"form-control\"\r\n         placeholder=\"Buscar préstamo por nombre de cliente o correo electrónico\"\r\n         value={searchTerm}\r\n         onChange={handleSearchChange}\r\n       />\r\n     </div>\r\n     <form onSubmit={handleSubmit}>\r\n       <div className=\"mb-3\">\r\n         <label htmlFor=\"loanId\" className=\"form-label\">\r\n           Préstamo\r\n         </label>\r\n         <select\r\n           className=\"form-control\"\r\n           id=\"loanId\"\r\n           name=\"loanId\"\r\n           value={form.loanId}\r\n           onChange={handleChange}\r\n           required\r\n         >\r\n           <option value=\"\">Seleccione un préstamo</option>\r\n           {filteredLoans.map((loan) => (\r\n             <option key={loan._id} value={loan._id}>\r\n               {getClientName(loan)} - Monto: {loan.amount}\r\n             </option>\r\n           ))}\r\n         </select>\r\n       </div>\r\n       {form.loanId && (\r\n         <div className=\"mb-3\">\r\n           <label>Cliente</label>\r\n           <p>\r\n             {getClientName(loans.find((loan) => loan._id === form.loanId))}\r\n           </p>\r\n         </div>\r\n       )}\r\n       <div className=\"mb-3\">\r\n         <label htmlFor=\"amount\" className=\"form-label\">\r\n           Monto\r\n         </label>\r\n         <input\r\n           type=\"number\"\r\n           className=\"form-control\"\r\n           id=\"amount\"\r\n           name=\"amount\"\r\n           value={form.amount}\r\n           onChange={handleChange}\r\n           required\r\n         />\r\n       </div>\r\n       <button type=\"submit\" className=\"btn btn-primary\">\r\n         Registrar Pago\r\n       </button>\r\n       {message && <p>{message}</p>}\r\n     </form>\r\n     <div className=\"mt-5\">\r\n       <h2>Pagos Realizados</h2>\r\n       <table className=\"table table-striped\">\r\n         <thead>\r\n           <tr>\r\n             <th>Cliente</th>\r\n             <th>Monto</th>\r\n             <th>Fecha</th>\r\n           </tr>\r\n         </thead>\r\n         <tbody>\r\n           {payments.map((payment) => (\r\n             <tr key={payment._id}>\r\n               <td>{getClientName(loans.find((loan) => loan._id === payment.loanId))}</td>\r\n               <td>{payment.amount}</td>\r\n               <td>{new Date(payment.date).toLocaleDateString()}</td>\r\n             </tr>\r\n           ))}\r\n         </tbody>\r\n       </table>\r\n       <h3>Monto Restante: {remainingAmount}</h3>\r\n     </div>\r\n   </div>\r\n );\r\n};\r\n\nexport default Payments;\r\n\n*/","map":{"version":3,"names":[],"sources":["D:/Usuario/wilme/Escritorio/Gestion_Loans_Clean/loan-app-ui/src/components/Payments.js"],"sourcesContent":[" /*import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Payments = () => {\r\n  const [form, setForm] = useState({\r\n    loanId: \"\",\r\n    amount: \"\",\r\n  });\r\n  const [loans, setLoans] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [payments, setPayments] = useState([]);\r\n  const [remainingAmount, setRemainingAmount] = useState(0);\r\n  const [searchTerm, setSearchTerm] = useState(\"\"); // Nuevo estado para el término de búsqueda\r\n\r\n  useEffect(() => {\r\n    const fetchLoans = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/loans`);\r\n        setLoans(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching loans:\", error);\r\n      }\r\n    };\r\n\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (form.loanId) {\r\n      const fetchPayments = async () => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:5000/api/payments/loan/${form.loanId}`);\r\n          setPayments(response.data);\r\n          const totalPaid = response.data.reduce((total, payment) => total + payment.amount, 0);\r\n          const loan = loans.find(loan => loan._id === form.loanId);\r\n          if (loan) {\r\n            setRemainingAmount(loan.amount - totalPaid);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching payments:\", error);\r\n        }\r\n      };\r\n\r\n      fetchPayments();\r\n    }\r\n  }, [form.loanId, loans]);\r\n\r\n  const handleChange = (e) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(`http://localhost:5000/api/payments`, form);\r\n      setMessage(\"Pago registrado con éxito.\");\r\n      setForm({ loanId: \"\", amount: \"\" });\r\n      setPayments([]);\r\n      setRemainingAmount(0);\r\n    } catch (error) {\r\n      setMessage(\"Error al registrar el pago.\");\r\n    }\r\n  };\r\n\r\n  const getClientName = (loan) => {\r\n    if (loan && loan.clientId) {\r\n      const { name, email } = loan.clientId;\r\n      return `${name} (${email})`;\r\n    }\r\n    return \"Cliente no encontrado\";\r\n  };\r\n\r\n  const filteredLoans = loans.filter((loan) =>\r\n    getClientName(loan).toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Registro de Pagos</h1>\r\n        <p className=\"lead\">Complete el formulario para registrar un pago</p>\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Buscar préstamo por nombre de cliente o correo electrónico\"\r\n          value={searchTerm}\r\n          onChange={handleSearchChange}\r\n        />\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"loanId\" className=\"form-label\">\r\n            Préstamo\r\n          </label>\r\n          <select\r\n            className=\"form-control\"\r\n            id=\"loanId\"\r\n            name=\"loanId\"\r\n            value={form.loanId}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\">Seleccione un préstamo</option>\r\n            {filteredLoans.map((loan) => (\r\n              <option key={loan._id} value={loan._id}>\r\n                {getClientName(loan)} - Monto: {loan.amount}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        {form.loanId && (\r\n          <div className=\"mb-3\">\r\n            <label>Cliente</label>\r\n            <p>\r\n              {getClientName(loans.find((loan) => loan._id === form.loanId))}\r\n            </p>\r\n          </div>\r\n        )}\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"amount\" className=\"form-label\">\r\n            Monto\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"amount\"\r\n            name=\"amount\"\r\n            value={form.amount}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Registrar Pago\r\n        </button>\r\n        {message && <p>{message}</p>}\r\n      </form>\r\n      <div className=\"mt-5\">\r\n        <h2>Pagos Realizados</h2>\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th>Cliente</th>\r\n              <th>Monto</th>\r\n              <th>Fecha</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {payments.map((payment) => (\r\n              <tr key={payment._id}>\r\n                <td>{getClientName(loans.find((loan) => loan._id === payment.loanId))}</td>\r\n                <td>{payment.amount}</td>\r\n                <td>{new Date(payment.date).toLocaleDateString()}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <h3>Monto Restante: {remainingAmount}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payments;\r\n\r\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}