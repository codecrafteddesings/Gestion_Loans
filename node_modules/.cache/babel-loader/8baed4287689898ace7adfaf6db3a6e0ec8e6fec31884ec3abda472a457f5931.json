{"ast":null,"code":"\n/*import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Loans = () => {\r\n  const [loans, setLoans] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/loans');\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching loans:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/loans/search?query=${searchQuery}`);\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching search results:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId ? loan.clientId.name : '',\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/update/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error('Error updating loan:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm('¿Estás seguro de que deseas eliminar este préstamo?')) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/delete/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error('Error deleting loan:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Préstamos</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por cliente o estado\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId ? loan.clientId.name : 'Cliente no encontrado'}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loans;\r\n*/\n\n/*import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Loans = () => {\r\n  const [loans, setLoans] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchLoans = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/loans');\r\n        setLoans(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching loans:', error);\r\n      }\r\n    };\r\n\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Préstamos</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId ? loan.clientId.name : 'Cliente no encontrado'}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loans;\r\n*/","map":{"version":3,"names":[],"sources":["D:/Usuario/wilme/Escritorio/Gestion_Loans_Clean/loan-app-ui/src/components/Loans.js"],"sourcesContent":["\r\n/*import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Loans = () => {\r\n  const [loans, setLoans] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [editLoan, setEditLoan] = useState(null);\r\n  const [loanForm, setLoanForm] = useState({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n\r\n  useEffect(() => {\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  const fetchLoans = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/loans');\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching loans:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/loans/search?query=${searchQuery}`);\r\n      setLoans(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching search results:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditLoan = (loan) => {\r\n    setEditLoan(loan._id);\r\n    setLoanForm({\r\n      clientId: loan.clientId ? loan.clientId.name : '',\r\n      amount: loan.amount,\r\n      interestRate: loan.interestRate,\r\n      term: loan.term,\r\n      frequency: loan.frequency,\r\n      status: loan.status,\r\n      dueDate: new Date(loan.dueDate).toISOString().split('T')[0],\r\n    });\r\n  };\r\n\r\n  const handleUpdateLoan = async () => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/loans/update/${editLoan}`, loanForm);\r\n      setEditLoan(null);\r\n      setLoanForm({ clientId: '', amount: '', interestRate: '', term: '', frequency: '', status: '', dueDate: '' });\r\n      fetchLoans();\r\n    } catch (error) {\r\n      console.error('Error updating loan:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteLoan = async (loanId) => {\r\n    if (window.confirm('¿Estás seguro de que deseas eliminar este préstamo?')) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/loans/delete/${loanId}`);\r\n        fetchLoans();\r\n      } catch (error) {\r\n        console.error('Error deleting loan:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Préstamos</h2>\r\n      <form onSubmit={handleSearch}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Buscar por cliente o estado\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Buscar</button>\r\n      </form>\r\n      <button className=\"btn btn-info mb-2\" onClick={fetchLoans}>Cargar Préstamos</button>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId ? loan.clientId.name : 'Cliente no encontrado'}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n              <td>\r\n                <button className=\"btn btn-warning mr-2\" onClick={() => handleEditLoan(loan)}>Editar</button>\r\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteLoan(loan._id)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {editLoan && (\r\n        <div className=\"mt-5\">\r\n          <h2>Editar Préstamo</h2>\r\n          <form onSubmit={(e) => { e.preventDefault(); handleUpdateLoan(); }}>\r\n            <div className=\"form-group\">\r\n              <label>ID del Cliente</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.clientId}\r\n                onChange={(e) => setLoanForm({ ...loanForm, clientId: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Monto</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.amount}\r\n                onChange={(e) => setLoanForm({ ...loanForm, amount: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Tasa de Interés</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.interestRate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, interestRate: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Plazo</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={loanForm.term}\r\n                onChange={(e) => setLoanForm({ ...loanForm, term: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Frecuencia</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.frequency}\r\n                onChange={(e) => setLoanForm({ ...loanForm, frequency: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Estado</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={loanForm.status}\r\n                onChange={(e) => setLoanForm({ ...loanForm, status: e.target.value })} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Fecha de Vencimiento</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                value={loanForm.dueDate}\r\n                onChange={(e) => setLoanForm({ ...loanForm, dueDate: e.target.value })} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success\">Actualizar</button>\r\n            <button type=\"button\" className=\"btn btn-secondary ml-2\" onClick={() => setEditLoan(null)}>Cancelar</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loans;\r\n*/\r\n\r\n/*import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Loans = () => {\r\n  const [loans, setLoans] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchLoans = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/loans');\r\n        setLoans(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching loans:', error);\r\n      }\r\n    };\r\n\r\n    fetchLoans();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Préstamos</h2>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Cliente</th>\r\n            <th>Monto</th>\r\n            <th>Tasa de Interés</th>\r\n            <th>Plazo</th>\r\n            <th>Frecuencia</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de Vencimiento</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loans.map((loan) => (\r\n            <tr key={loan._id}>\r\n              <td>{loan.clientId ? loan.clientId.name : 'Cliente no encontrado'}</td>\r\n              <td>{loan.amount}</td>\r\n              <td>{loan.interestRate}</td>\r\n              <td>{loan.term}</td>\r\n              <td>{loan.frequency}</td>\r\n              <td>{loan.status}</td>\r\n              <td>{new Date(loan.dueDate).toLocaleDateString()}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loans;\r\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}